/* eslint-disable react/no-unescaped-entities */
import React, { ChangeEvent, useState, FormEvent } from "react";
import GobackButton from "@/components/GobackButton";
import Head from "next/head";
import styles from "@/styles/basic-info/input/basic_info_input.module.css";
import InputField from "@/components/basic-info/input/InputField";
import {
	UserBasicInfo,
	validate_basic_info_inputs,
} from "@/utilities/FormValidation";
import { useRouter } from "next/router";


const BasicInfoManually = () => {
	const router = useRouter()

	const CompanySize: string[] = [
		"1-10 employees",
		"11-50 employees",
		"51-200 employees",
		"201-500 employees",
		"501-1000 employees",
		"1001-5000 employees",
	];
	const location: string[] = [
		"Country 1",
		"Country 2",
		"Country3",
		"Country 4",
		"Country 5",
		"Country 6",
	];
	const [companyName, setCompanyName] = useState<string>("");
	const [companyNameError, setCompanyNameError] = useState<string>("");
	const [industryName, setindustryName] = useState<string>("");
	const [industryNameError, setindustryNameError] = useState<string>("");
	const [businessDescription, setbusinessDescription] = useState<string>("");
	const [businessDescriptionError, setbusinessDescriptionError] =
		useState<string>("");
	const [companySizeValue, setCompanySizeValue] = useState<string>("");
	const [companySizeValueError, setCompanySizeValueError] =
		useState<string>("");
	const [locationValue, setLocationValue] = useState<string>("");
	const [locationValueError, setLocationValueError] = useState<string>("");

	const defaultCustomerData: UserBasicInfo = {
		companyName: "",
		industryName: "",
		businessDescription: "",
		companySize: "",
		location: "",
	};
	let customerData: UserBasicInfo = defaultCustomerData;

	const handleCompanyName = (event: ChangeEvent<HTMLInputElement>) => {
		setCompanyName(event.target.value);
	};
	const handleIndustryName = (event: ChangeEvent<HTMLInputElement>) => {
		setindustryName(event.target.value);
	};
	const handleBusinessDescription = (
		event: ChangeEvent<HTMLTextAreaElement>
	) => {
		setbusinessDescription(event.target.value);
	};
	const handleCompanySize = (event: ChangeEvent<HTMLSelectElement>) => {
		setCompanySizeValue(event.target.value);
	};
	const handleLocation = (event: ChangeEvent<HTMLSelectElement>) => {
		setLocationValue(event.target.value);
	};
	const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
		event.preventDefault();
		customerData.companyName = companyName;
		customerData.industryName = industryName;
		customerData.businessDescription = businessDescription;
		customerData.companySize = companySizeValue;
		customerData.location = locationValue;

		const FormContainsErrors = await validate_basic_info_inputs(
			customerData
		);
		if (FormContainsErrors?.length > 0) {
			const missing_companyName: string = FormContainsErrors.filter(
				(error: string) =>
					error.toLocaleLowerCase().includes("company name")
			);
			const missing_industryName: string = FormContainsErrors.filter(
				(error: string) =>
					error.toLocaleLowerCase().includes("industry")
			);
			const missing_businessDescription: string =
				FormContainsErrors.filter((error: string) =>
					error.toLocaleLowerCase().includes("business")
				);
			const missing_companySize: string = FormContainsErrors.filter(
				(error: string) => error.toLocaleLowerCase().includes("size")
			);
			const missing_location: string = FormContainsErrors.filter(
				(error: string) =>
					error.toLocaleLowerCase().includes("location")
			);

			setCompanyNameError(missing_companyName);
			setindustryNameError(missing_industryName);
			setbusinessDescriptionError(missing_businessDescription);
			setCompanySizeValueError(missing_companySize);
			setLocationValueError(missing_location);

		} else {
			setCompanyName("");
			setCompanySizeValue("");
			setLocationValue("");
			setindustryName("");
			setbusinessDescription("");
			setCompanyNameError("");
			setindustryNameError("");
			setbusinessDescriptionError("");
			setCompanySizeValueError("");
			setLocationValueError("");
			router.push('/profile')
		}
	};
	return (
		<>
			<Head>
				<title>Input Basic Infos</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className={styles.input_basic_infos}>
				<GobackButton />
				<div className={styles.input_basic_infos_container}>
					<div className={styles.input_basic_infos_header}>
						<span>Basic Info</span>
						<span>
							If you're new here, please take a moment to enter
							your basic information.{" "}
						</span>
					</div>
					<form
						onSubmit={handleSubmit}
						className={styles.input_basic_infos_form}
					>
						<div className={styles.first_section}>
							<div className="flex flex-col items-start">
								<InputField
									label="Name"
									placeholder="Company Name"
									inputType="text"
									value={companyName}
									handleChangeInput={handleCompanyName}
								/>
								{companyNameError && (
									<span className="mt-[-1em] ml-[1.4em] text-magenta font-helvetica-medium text-[.75em]">
										{companyNameError}{" "}
									</span>
								)}
							</div>
							<div className="flex flex-col items-start">
								<InputField
									label="Industry"
									placeholder="Please indicate your industry"
									inputType="text"
									value={industryName}
									handleChangeInput={handleIndustryName}
								/>
								{industryNameError && (
									<span className="mt-[-1em] ml-[1.4em] text-magenta font-helvetica-medium text-[.75em]">
										{industryNameError}{" "}
									</span>
								)}
							</div>
						</div>
						<div className={styles.second_section}>
							<div className="flex flex-col items-start">
								<InputField
									label="Company Size"
									inputType="select"
									selectInputOptions={CompanySize}
									selectDefaultValue="Select an option"
									value={companySizeValue}
									handleChangeSelect={handleCompanySize}
								/>
								{companySizeValueError && (
									<span className="mt-[-1em] ml-[1.4em] text-magenta font-helvetica-medium text-[.75em]">
										{companySizeValueError}{" "}
									</span>
								)}
							</div>
							<div className="flex flex-col items-start">
								<InputField
									label="Location"
									inputType="select"
									selectInputOptions={location}
									selectDefaultValue="Enter your location"
									value={locationValue}
									handleChangeSelect={handleLocation}
								/>
								{locationValueError && (
									<span className="mt-[-1em] ml-[1.4em] text-magenta font-helvetica-medium text-[.75em]">
										{locationValueError}{" "}
									</span>
								)}
							</div>
						</div>
						<div className={styles.third_section}>
							<div className="flex flex-col items-start">
								<InputField
									label="Business Description"
									placeholder="Please provide a brief Business Description for [insert your company's name]."
									inputType="textarea"
									value={businessDescription}
									handleChangeTextarea={
										handleBusinessDescription
									}
									textareaRows={1}
								/>
								{businessDescriptionError && (
									<span className="mt-[4.5em] ml-[1.4em] text-magenta font-helvetica-medium text-[.75em]">
										{businessDescriptionError}{" "}
									</span>
								)}
							</div>
						</div>
						<div className={styles.submit_button_container}>
							<button
								type="submit"
								className={styles.submit_button}
							>
								Add Basic Info
							</button>
						</div>
					</form>
				</div>
			</main>
		</>
	);
};
export default BasicInfoManually;
